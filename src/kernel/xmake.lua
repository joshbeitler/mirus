toolchain("clang-cross")
    set_kind("standalone")

    set_toolset("cc", "clang")
    set_toolset("ld", "ld.lld")
    set_toolset("ar", "llvm-ar")
    set_toolset("strip", "llvm-strip")

    add_cxflags("-target x86_64-unknown-elf")
    add_cxflags("-Wall")
    add_cxflags("-Wextra")
    add_cxflags("-std=gnu11")
    add_cxflags("-ffreestanding")
    add_cxflags("-fno-stack-protector")
    add_cxflags("-fno-stack-check")
    add_cxflags("-fno-lto")
    add_cxflags("-fPIE")
    add_cxflags("-m64")
    add_cxflags("-mno-80387")
    add_cxflags("-mno-mmx")
    add_cxflags("-mno-sse")
    add_cxflags("-mno-sse2")
    add_cxflags("-mno-red-zone")
    add_cxflags("-fno-builtin")
    add_cxflags("-nostdlib")

    add_includedirs("$(projectdir)/src/kernel/include")
    --add_includedirs(path.join(project_root, "src/libs/logger/include"))
    add_includedirs("$(projectdir)/src/libs/limine/include")
    add_includedirs("$(projectdir)/src/libs/ssfn/include")

    add_ldflags("-m elf_x86_64", { force = true })
    add_ldflags("-nostdlib", { force = true })
    add_ldflags("-pie", { force = true })
    add_ldflags("-z text", { force = true })
    add_ldflags("-z max-page-size=0x1000", { force = true })
toolchain_end()

set_toolchains("clang-cross")

target("kernel")
    set_kind("binary")
    set_arch("x86_64")
    set_kind("binary")
    add_files("core/*.c") --add more as needed? or glob?
    set_filename("kernel")
    add_ldflags("-T$(projectdir)/meta/linker.ld", { force = true })
    add_deps("limine")
    add_deps("ssfn")
